// This file is auto-generated by @hey-api/openapi-ts

import { type Options, appControllerIndex, authControllerCheckLogin, authControllerRegister, authControllerLogin, gamesControllerGamesList, gamesControllerSettings, gamesControllerCreateIsAllowed, gamesControllerCreateGame, gamesControllerGetGameById, gamesControllerPointGame, usersControllerInfo } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { AppControllerIndexData, AuthControllerCheckLoginData, AuthControllerCheckLoginResponse, AuthControllerRegisterData, AuthControllerRegisterError, AuthControllerRegisterResponse, AuthControllerLoginData, AuthControllerLoginError, AuthControllerLoginResponse, GamesControllerGamesListData, GamesControllerSettingsData, GamesControllerCreateIsAllowedData, GamesControllerCreateGameData, GamesControllerCreateGameError, GamesControllerCreateGameResponse, GamesControllerGetGameByIdData, GamesControllerPointGameData, GamesControllerPointGameError, GamesControllerPointGameResponse, UsersControllerInfoData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const appControllerIndexQueryKey = (options?: Options<AppControllerIndexData>) => createQueryKey('appControllerIndex', options);

export const appControllerIndexOptions = (options?: Options<AppControllerIndexData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await appControllerIndex({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: appControllerIndexQueryKey(options)
    });
};

export const authControllerCheckLoginQueryKey = (options: Options<AuthControllerCheckLoginData>) => createQueryKey('authControllerCheckLogin', options);

export const authControllerCheckLoginOptions = (options: Options<AuthControllerCheckLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authControllerCheckLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerCheckLoginQueryKey(options)
    });
};

export const authControllerCheckLoginMutation = (options?: Partial<Options<AuthControllerCheckLoginData>>): UseMutationOptions<AuthControllerCheckLoginResponse, DefaultError, Options<AuthControllerCheckLoginData>> => {
    const mutationOptions: UseMutationOptions<AuthControllerCheckLoginResponse, DefaultError, Options<AuthControllerCheckLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await authControllerCheckLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authControllerRegisterQueryKey = (options: Options<AuthControllerRegisterData>) => createQueryKey('authControllerRegister', options);

export const authControllerRegisterOptions = (options: Options<AuthControllerRegisterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authControllerRegister({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerRegisterQueryKey(options)
    });
};

export const authControllerRegisterMutation = (options?: Partial<Options<AuthControllerRegisterData>>): UseMutationOptions<AuthControllerRegisterResponse, AuthControllerRegisterError, Options<AuthControllerRegisterData>> => {
    const mutationOptions: UseMutationOptions<AuthControllerRegisterResponse, AuthControllerRegisterError, Options<AuthControllerRegisterData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await authControllerRegister({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authControllerLoginQueryKey = (options: Options<AuthControllerLoginData>) => createQueryKey('authControllerLogin', options);

export const authControllerLoginOptions = (options: Options<AuthControllerLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authControllerLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerLoginQueryKey(options)
    });
};

export const authControllerLoginMutation = (options?: Partial<Options<AuthControllerLoginData>>): UseMutationOptions<AuthControllerLoginResponse, AuthControllerLoginError, Options<AuthControllerLoginData>> => {
    const mutationOptions: UseMutationOptions<AuthControllerLoginResponse, AuthControllerLoginError, Options<AuthControllerLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await authControllerLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const gamesControllerGamesListQueryKey = (options?: Options<GamesControllerGamesListData>) => createQueryKey('gamesControllerGamesList', options);

export const gamesControllerGamesListOptions = (options?: Options<GamesControllerGamesListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await gamesControllerGamesList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: gamesControllerGamesListQueryKey(options)
    });
};

export const gamesControllerSettingsQueryKey = (options?: Options<GamesControllerSettingsData>) => createQueryKey('gamesControllerSettings', options);

export const gamesControllerSettingsOptions = (options?: Options<GamesControllerSettingsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await gamesControllerSettings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: gamesControllerSettingsQueryKey(options)
    });
};

export const gamesControllerCreateIsAllowedQueryKey = (options?: Options<GamesControllerCreateIsAllowedData>) => createQueryKey('gamesControllerCreateIsAllowed', options);

export const gamesControllerCreateIsAllowedOptions = (options?: Options<GamesControllerCreateIsAllowedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await gamesControllerCreateIsAllowed({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: gamesControllerCreateIsAllowedQueryKey(options)
    });
};

export const gamesControllerCreateGameQueryKey = (options?: Options<GamesControllerCreateGameData>) => createQueryKey('gamesControllerCreateGame', options);

export const gamesControllerCreateGameOptions = (options?: Options<GamesControllerCreateGameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await gamesControllerCreateGame({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: gamesControllerCreateGameQueryKey(options)
    });
};

export const gamesControllerCreateGameMutation = (options?: Partial<Options<GamesControllerCreateGameData>>): UseMutationOptions<GamesControllerCreateGameResponse, GamesControllerCreateGameError, Options<GamesControllerCreateGameData>> => {
    const mutationOptions: UseMutationOptions<GamesControllerCreateGameResponse, GamesControllerCreateGameError, Options<GamesControllerCreateGameData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await gamesControllerCreateGame({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const gamesControllerGetGameByIdQueryKey = (options: Options<GamesControllerGetGameByIdData>) => createQueryKey('gamesControllerGetGameById', options);

export const gamesControllerGetGameByIdOptions = (options: Options<GamesControllerGetGameByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await gamesControllerGetGameById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: gamesControllerGetGameByIdQueryKey(options)
    });
};

export const gamesControllerPointGameQueryKey = (options: Options<GamesControllerPointGameData>) => createQueryKey('gamesControllerPointGame', options);

export const gamesControllerPointGameOptions = (options: Options<GamesControllerPointGameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await gamesControllerPointGame({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: gamesControllerPointGameQueryKey(options)
    });
};

export const gamesControllerPointGameMutation = (options?: Partial<Options<GamesControllerPointGameData>>): UseMutationOptions<GamesControllerPointGameResponse, GamesControllerPointGameError, Options<GamesControllerPointGameData>> => {
    const mutationOptions: UseMutationOptions<GamesControllerPointGameResponse, GamesControllerPointGameError, Options<GamesControllerPointGameData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await gamesControllerPointGame({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerInfoQueryKey = (options?: Options<UsersControllerInfoData>) => createQueryKey('usersControllerInfo', options);

export const usersControllerInfoOptions = (options?: Options<UsersControllerInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerInfoQueryKey(options)
    });
};