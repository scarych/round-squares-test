// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { AppControllerIndexData, AppControllerIndexResponses, AuthControllerCheckLoginData, AuthControllerCheckLoginResponses, AuthControllerRegisterData, AuthControllerRegisterResponses, AuthControllerRegisterErrors, AuthControllerLoginData, AuthControllerLoginResponses, AuthControllerLoginErrors, GamesControllerGamesListData, GamesControllerGamesListResponses, GamesControllerGamesListErrors, GamesControllerSettingsData, GamesControllerSettingsResponses, GamesControllerSettingsErrors, GamesControllerCreateIsAllowedData, GamesControllerCreateIsAllowedResponses, GamesControllerCreateIsAllowedErrors, GamesControllerCreateGameData, GamesControllerCreateGameResponses, GamesControllerCreateGameErrors, GamesControllerGetGameByIdData, GamesControllerGetGameByIdResponses, GamesControllerGetGameByIdErrors, GamesControllerPointGameData, GamesControllerPointGameResponses, GamesControllerPointGameErrors, UsersControllerInfoData, UsersControllerInfoResponses, UsersControllerInfoErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appControllerIndex = <ThrowOnError extends boolean = false>(options?: Options<AppControllerIndexData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerIndexResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

export const authControllerCheckLogin = <ThrowOnError extends boolean = false>(options: Options<AuthControllerCheckLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerCheckLoginResponses, unknown, ThrowOnError>({
        url: '/auth/checkLogin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const authControllerRegister = <ThrowOnError extends boolean = false>(options: Options<AuthControllerRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerRegisterResponses, AuthControllerRegisterErrors, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const authControllerLogin = <ThrowOnError extends boolean = false>(options: Options<AuthControllerLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerLoginResponses, AuthControllerLoginErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const gamesControllerGamesList = <ThrowOnError extends boolean = false>(options?: Options<GamesControllerGamesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GamesControllerGamesListResponses, GamesControllerGamesListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games',
        ...options
    });
};

export const gamesControllerSettings = <ThrowOnError extends boolean = false>(options?: Options<GamesControllerSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GamesControllerSettingsResponses, GamesControllerSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games/settings',
        ...options
    });
};

export const gamesControllerCreateIsAllowed = <ThrowOnError extends boolean = false>(options?: Options<GamesControllerCreateIsAllowedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GamesControllerCreateIsAllowedResponses, GamesControllerCreateIsAllowedErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games/create',
        ...options
    });
};

export const gamesControllerCreateGame = <ThrowOnError extends boolean = false>(options?: Options<GamesControllerCreateGameData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GamesControllerCreateGameResponses, GamesControllerCreateGameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games/create',
        ...options
    });
};

export const gamesControllerGetGameById = <ThrowOnError extends boolean = false>(options: Options<GamesControllerGetGameByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GamesControllerGetGameByIdResponses, GamesControllerGetGameByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games/{id}',
        ...options
    });
};

export const gamesControllerPointGame = <ThrowOnError extends boolean = false>(options: Options<GamesControllerPointGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GamesControllerPointGameResponses, GamesControllerPointGameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games/{id}',
        ...options
    });
};

export const usersControllerInfo = <ThrowOnError extends boolean = false>(options?: Options<UsersControllerInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersControllerInfoResponses, UsersControllerInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/info',
        ...options
    });
};